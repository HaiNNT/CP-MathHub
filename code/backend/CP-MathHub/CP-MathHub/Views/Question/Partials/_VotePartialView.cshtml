@model CP_MathHub.Models.Question.VoteViewModel
@using CP_MathHub.Entity
@using Microsoft.AspNet.Identity;
@using Microsoft.AspNet.Identity.Owin;
<div class="col-xs-1 col-sm-1 col-md-1 mh-vote">
    <div>
        @if (Model.Voted == null)
        {
            <i onclick="vote(this, @Model.Id, 1)" class="fa fa-chevron-up mh-vote-icon" title="@Model.VoteUp"></i>
        }
        else
        {
            <i class="fa fa-chevron-up mh-vote-icon @(Model.Voted.Type == VoteEnum.VoteUp ? "mh-voted" : "")" title="@Model.VoteUp"></i>

        }
    </div>
    <div>
        <span class="mh-vote-num">@Html.VoteNumer(Model.VoteUp - Model.VoteDown)</span>
    </div>
    <div>
        @if (Model.Voted == null)
        {
            <i onclick="vote(this, @Model.Id, 2)" class="fa fa-chevron-down mh-vote-icon mh-vote-down" title="@Model.VoteDown"></i>
        }
        else
        {
            <i class="fa fa-chevron-down mh-vote-icon mh-vote-down  @(Model.Voted.Type == VoteEnum.VoteDown ? "mh-voted" : "")" title="@Model.VoteDown"></i>

        }
    </div>
    @{
        if (!Model.IsQuestion && Model.Accepted)
        {
            <div>
                <i class="fa fa-check mh-check-icon mh-checked"></i>
            </div>
        }
        else if (!Model.IsQuestion && !Model.Accepted && ((int)ViewData["UserId"] == User.Identity.GetUserId<int>()))
        {
            <div>
                <i class="fa fa-check mh-check-icon"></i>
            </div>
        }
    }
</div>
